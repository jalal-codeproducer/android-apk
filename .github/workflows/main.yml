name: CI

on:
  workflow_dispatch: 
  
  #push:
  #  branches: [main]

  pull_request:
    branches: [main]

jobs:
  start:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Run sample script
        run: echo Hello, world
      - name: Write base64-encoded keystore to file
        run: echo "${{ secrets.SIGNING_KEY }}" > app/keystore.base64 |pwd
       

  lint:
    name: Perform lint check
    needs: [start]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        
      # Gradle v8.0.0 requires java JDK v17
      - name: Write base64-encoded keystore to file
        run: echo "${{ secrets.SIGNING_KEY }}" > app/keystore.base64
  
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
          
      - name: Set up Java JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: temurin
          #cache: gradle
          
      - name: Make Gradle executable
        run: chmod +x ./gradlew
  
      - name: Run lint
        run: ./gradlew lintDebug
  
      - name: Upload html lint report
        uses: actions/upload-artifact@v3
        with:
          name: lint.html
          path: app/build/reports/lint-results-debug.html
  unit-test:
    name: Perform Unit Testing
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Write base64-encoded keystore to file
        run: echo "${{ secrets.SIGNING_KEY }}" > app/keystore.base64  
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Set up Java JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: temurin
      - name: Run tests
        run: ./gradlew test
  
     # - name: Upload test report
      #  uses: actions/upload-artifact@v3
       # with:
        #  name: unit_test_report
         # path: app/build/reports/androidTests/
 # build:
  #  name: Generate App Bundle
    #runs-on: ubuntu-latest
   # needs: [unit-test]
    #steps:
    #- name: Cache Gradle
     # uses: actions/cache@v3
      #with:
       # path: ~/.gradle/caches
        #key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        #restore-keys: ${{ runner.os }}-gradle-
    #- uses: actions/checkout@v4
    #- name: set up JDK 17
     # uses: actions/setup-java@v4
      #with:
       # java-version: '17'
        #distribution: 'temurin'
    #- name: Bundle 'release' with Gradle
     # run: ./gradlew bundleRelease

  apk:
    name: Build Release signed APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Write base64-encoded keystore to file
        run: echo "${{ secrets.SIGNING_KEY }}" > app/keystore.base64

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.PW }}
          keyPassword: ${{ secrets.PW }}
        #env:
         # BUILD_TOOLS_VERSION: "30.0.2"

      - name: Upload Signed APK
        uses: actions/upload-artifact@v3
        with:
          name: sample-app-signed  # Artifact Name
          path: app/build/outputs/apk/release/*.apk
      
  
